---

const { images } = Astro.props;
---

<div class="image-pair">
  {images.map(({ src, title, subtitle, parallax }) => (

    <div class="image_item" {...(parallax && { 'data-speed': parallax })}>

      <img src={src} alt={title} width="520" />

      <span>{title && <b>{title}</b> } {subtitle && subtitle}</span>

    </div>
  ))}
</div>

<style>

span{
    font-weight: 300;
    font-size: 12px;
    line-height: 21px;
    letter-spacing: 0.12em;
    margin: 12px 0 0;
    display: block;
    text-transform: uppercase;
    opacity: 0;
    b{
      font-weight: 300;
      text-transform: none;
      font-size: 17px;
      letter-spacing: 0;
    }
  }




  .image-pair{
    width: 100%;
    max-width: 168rem;
    max-width: 1280px;
    margin-right: auto;
    margin-left: auto;
    padding-right: 3rem;
    padding-left: 3rem;
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    align-items: center;
    grid-template-columns: var(--start-padding, 0) var(--first-image, 1fr) var(--overlap-x, .35fr) var(--second-image, 1fr) var(--end-padding, 0);
    grid-template-rows: auto var(--overlap-y, min(10.7rem, 7.7vw)) auto;
    --start-padding: .25fr;
    --first-image: .75fr;
    --overlap-x: fr;
    --overlap-y: min(47rem, 33.33vw);
    --second-image: .75fr;
    --end-padding: .25fr;

    max-width: 350px;
    margin-right: auto;
    margin-left: auto;
    padding: 40px 0;
    img{
      max-width: 240px;
    }

    .image_item:nth-child(1){
      opacity: .8;

      &:hover{
        opacity: 1;
        z-index: 2;
      }
    }
    .image_item:nth-child(1):hover ~ .image_item:nth-child(2) {
      opacity: 0.8;
      transition: opacity 0.5s ease;
    }
  }
  .image_item{
    position: relative;
    transition:  opacity .5s ease;
    /* opacity: 0.8; */
    z-index: 0;
    &:hover{
      z-index: 2;
      opacity: 1;
    }
  }
  .image_item:nth-child(1){
    grid-column: 2 / span 2;
    grid-row: 1 / span 2;
  }
  .image_item:nth-child(2){
    grid-column: 3 / span 2;
    grid-row: 2 / span 2;
  }
  @media screen and (min-width: 768px) {
    span{
      opacity: 1;
    }
    .image-pair{
      max-width: 1280px;
      padding-right: 3rem;
      padding-left: 3rem;
      --overlap-x: .1fr;

    img{
      max-width: inherit;
    }
  }
}

</style>


<script client:load >
  (function () {
    "use strict";

    const parallaxElements = document.querySelectorAll(".image_item");

    function updateParallax() {
      parallaxElements.forEach(function (element) {
        const rect = element.getBoundingClientRect();
        const speed = parseFloat(element.getAttribute("data-speed"));

        // Verificar si el elemento está en el viewport
        if (rect.top < window.innerHeight && rect.bottom >= 0) {
          const yPos = -(rect.top * speed);
          element.style.transform = "translate3d(0, " + yPos + "px, 0)";
        } else {
          element.style.transform = "translate3d(0, 0, 0)";
        }
      });
    }

    // Actualizar el efecto parallax al desplazarse y al cargar la página
    window.addEventListener("scroll", updateParallax);
    window.addEventListener("resize", updateParallax);

    updateParallax();
  })();
</script>