---
import { Image } from "astro:assets";

const { image , title ,subtitle, lazyload } = Astro.props

---
<div class="row">
  <div class="display">
  <figure>
      <Image
        loading={lazyload && 'lazy' || 'eager'}
        data-speed=".2"
        class="img-parallax"
        src={image}
        width={image.width}
        densities={[1.5, 2]}
        alt=`${title || ''} ${subtitle || ''}`
      />
    </figure>
  </div>
    <span>{title && <b>{title}</b>} {subtitle && subtitle}</span>
</div>

<style>
   figure{
    position: absolute;
    height: 100%;
    width: 100%;
  }
  .display{
    width: 100%;
    position: relative;
    overflow: hidden;
    aspect-ratio: 16 / 9; /* Proporci칩n deseada */
  }
  img{
    will-change: transform;
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: absolute;
    left: 0;
    top: 0;
  }
  span{
    font-weight: 300;
    font-size: 12px;
    line-height: 21px;
    letter-spacing: 0.12em;
    margin: 12px 0 0;
    display: block;
    text-transform: uppercase;
    b{
      font-weight: 300;
      font-size: 17px;
      letter-spacing: 0;
      text-transform: none;
    }
  }
  .row{
    width: 100%;
    box-sizing: border-box;
  }
  @media screen and (min-width: 768px) {
    figure{
      height: 115%;
    }
  }
</style>

<script is:inline>
  document.addEventListener('astro:page-load', () => {
    if (window.isParallaxInitialized) return; // Usar 'window' para asegurar que es global

    const parallaxElements = document.querySelectorAll(".img-parallax");
    let viewportWidth = window.innerWidth;

    // Si la pantalla es peque침a, no hacer nada
    if (viewportWidth < 760) return;

    function updateParallax() {
      parallaxElements.forEach(function (element) {
        const rect = element.getBoundingClientRect();
        const speed = parseFloat(element.getAttribute("data-speed"));

        // Verificar si el elemento est치 en el viewport
        if (rect.top < window.innerHeight && rect.bottom >= 0) {
          const yPos = -(rect.top * speed);
          element.style.transform = "translate3d(0, " + yPos + "px, 0)";
        } else {
          element.style.transform = "translate3d(0, 0, 0)";
        }
      });
    }

    // Actualizar el efecto parallax al desplazarse y al cargar la p치gina
    window.addEventListener("scroll", updateParallax);
    window.addEventListener("resize", updateParallax);

    updateParallax();

    // Marcar que el parallax ya ha sido inicializado
    window.isParallaxInitialized = true;
  });
</script>
