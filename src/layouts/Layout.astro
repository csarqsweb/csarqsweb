---
interface Props {
	title: string;
	description?: string;
}

import Head from '@/components/Common/Head/Head';
import Navigator from '@/components/Common/Navigator/Navigator';
// Supports weights 100-900
import '@fontsource-variable/inter';
const { title , description } = Astro.props;
---

<!doctype html>
<html lang="es">
	<Head title={title} description={description}/>
	<body>
		<Navigator />
		<slot />
	</body>
</html>
<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		/* font-family: system-ui, sans-serif; */
		font-family: 'Inter Variable', sans-serif;
		background: #f2f2f2;
	}
	body{
		margin: 0;
	}
	h1,
	h2,
	h3,
	h4,
	h5,
	h6,
	p{
	margin: 0;

	}
	figure{
		margin: 0;
	}

	a {
		text-decoration: none;
		color: inherit;
	}
	.row{
		padding: 0 20px;
		margin: auto;
		max-width: 1200px;
		/* width: 100%; */
	}


.btn-primary {

	padding: 9px 17px 8px;

	position: relative;
	display: flex;
	justify-content: center;
	align-items: center;
	box-shadow: 0px 6px 24px 0px rgba(0, 0, 0, 0.2);
	overflow: hidden;
	cursor: pointer;
	border: none;
	background: black;
	color: white;
	border-radius: 125px;
	font-weight: 300;
	text-transform: uppercase;
	font-size: 14px;
	line-height: 17px;
	letter-spacing: 0.1em;
	width: auto;
  max-width: 150px;
}

.btn-primary:after {
  content: " ";
  width: 0%;
  height: 100%;
  background: #B49F7F;
  position: absolute;
  transition: all 0.4s ease-in-out;
  right: 0;
}

.btn-primary:hover::after {
  right: auto;
  left: 0;
	top: 0;
  width: 100%;
}

.btn-primary span {
  text-align: center;
  text-decoration: none;
  width: 100%;
  color: #fff;
  letter-spacing: 0.1em;
  z-index: 20;
  transition: all 0.3s ease-in-out;
}

.btn-primary:hover span {
  color: #183153;
  animation: scaleUp 0.3s ease-in-out;
}

@keyframes scaleUp {
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.95);
  }

  100% {
    transform: scale(1);
  }
}




	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}


	@media screen and (min-width: 768px) {
		.hide-mobile{
			display: block ;
		}
		.hide-desktop{
			display: none;
		}
	}
</style>

<script is:inline data-astro-rerun>
	(function () {
	'use strict';

	function initHeader() {
		var Header = document.querySelector('.header'),
			viewportHeight = window.innerHeight,
			lastScrollY =
				window.scrollY ||
				window.pageYOffset ||
				document.documentElement.scrollTop,
			ticking = false;

		function Constructor() {
			const LinkToggle = document.querySelectorAll('[data-togglenav]');

			for (let e = 0; e < LinkToggle.length; e++) {
				LinkToggle[e].addEventListener('click', NavToggle, false);
			}
			window.addEventListener('scroll', onScroll);
		}

		function NavToggle() {
			const Nav = document.querySelector('.nav');
			const NavOverlay = document.querySelector('.nav__overlay');
			Nav.classList.toggle('active');
			NavOverlay.classList.toggle('active');
		}

		function onScroll() {
			lastScrollY =
				window.scrollY ||
				window.pageYOffset ||
				document.documentElement.scrollTop;

			requestTick();
		}

		function requestTick() {
			if (!ticking) {
				requestAnimationFrame(update);
				ticking = true;
			}
		}

		function update() {
			const menuLinks = document.querySelectorAll('.header__ul a');

			var scrollPosition = lastScrollY;
			var updateScroll = Math.max(scrollPosition - 350 - Header.offsetHeight);

			Header.classList[scrollPosition >= 70 ? 'add' : 'remove'](
				'header-before',
			);

			if (scrollPosition > 350 && updateScroll < 0) {
				Header.style.position = 'fixed';
				Header.style.top = updateScroll + 'px';
			}

			if (updateScroll >= 0) {
				Header.style.top = 0 + 'px';
			}

			if (scrollPosition < 350) {
				Header.style.position = 'absolute';
				Header.style.top = '0';
			}

			menuLinks.forEach((link) => {
				const section = document.querySelector(link.getAttribute('href'));
				const bounding = section.getBoundingClientRect();

				if (
					bounding.top <= window.innerHeight / 2 &&
					bounding.bottom >= window.innerHeight / 2
				) {
					link.classList.add('active');
				} else {
					link.classList.remove('active');
				}
			});
			ticking = false;
		}

		Constructor();
	}

	// Initialize header on page load
	initHeader();

	// Reinitialize header on Astro page load (useful in SPA mode)
	window.addEventListener('astro:page-load', () => {
		initHeader();
	});
})();

</script>